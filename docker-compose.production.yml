# LEX AI Production Docker Compose
# 🔱 JAI MAHAKAAL! Complete production orchestration

version: '3.8'

networks:
  lex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  lex-data:
    driver: local
  lex-logs:
    driver: local
  lex-backups:
    driver: local
  lex-config:
    driver: local

services:
  # ==================== MAIN LEX APPLICATION ====================
  lex-api:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: lex-production
    restart: always
    
    # Network configuration
    networks:
      lex-network:
        ipv4_address: 172.20.0.10
    
    # Port mapping
    ports:
      - "8000:8000"
    
    # Environment variables
    environment:
      - ENV=production
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=info
      - PYTHONUNBUFFERED=1
      
      # Security settings
      - ENABLE_RATE_LIMITING=true
      - ENABLE_MONITORING=true
      - ENABLE_BACKUP=true
      
      # Database settings
      - DATABASE_URL=sqlite:///data/lex_memory.db
      - SQLITE_WAL_MODE=true
      - SQLITE_CACHE_SIZE=10000
      
      # API Keys (loaded from .env file)
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - ALIBABA_API_KEY=${ALIBABA_API_KEY}
      - ALIBABA_API_SECRET=${ALIBABA_API_SECRET}
      - LEXOS_SECRET_KEY=${LEXOS_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      
      # CORS settings
      - ALLOWED_ORIGINS=https://lexcommand.ai,https://www.lexcommand.ai
      
      # Rate limiting
      - RATE_LIMIT_PER_MINUTE=100
      - RATE_LIMIT_PER_HOUR=1000
    
    # Volume mounts
    volumes:
      # Data persistence
      - lex-data:/app/data
      - lex-logs:/app/logs
      - lex-backups:/app/backups
      - lex-config:/app/config
      
      # Mount host backup directory for external access
      - ./backups:/app/backups/external:ro
      
      # Configuration override (optional)
      - ./production_config:/app/production_config:ro
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health check
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=lex-api"
    
    # Dependencies
    depends_on:
      - lex-backup
      - lex-monitor
    
  # ==================== BACKUP SERVICE ====================
  lex-backup:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: lex-backup
    restart: always
    
    networks:
      - lex-network
    
    # Override command for backup service
    command: >
      sh -c "
        echo '🔱 Starting LEX Backup Service';
        while true; do
          echo '📦 Running automated backup...';
          python3 database_optimizer.py --backup;
          echo '⏰ Next backup in 1 hour';
          sleep 3600;
        done
      "
    
    environment:
      - ENV=production
      - SERVICE_TYPE=backup
    
    volumes:
      - lex-data:/app/data:ro  # Read-only access to data
      - lex-backups:/app/backups
      - ./backups:/app/backups/external  # Host backup directory
    
    # Resource limits (lighter for backup service)
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
        labels: "service=lex-backup"

  # ==================== MONITORING SERVICE ====================
  lex-monitor:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: lex-monitor
    restart: always
    
    networks:
      - lex-network
    
    # Override command for monitoring service
    command: >
      sh -c "
        echo '🔱 Starting LEX Monitoring Service';
        python3 production_monitor.py --daemon --interval 60
      "
    
    environment:
      - ENV=production
      - SERVICE_TYPE=monitor
      - MONITOR_INTERVAL=60
    
    volumes:
      - lex-data:/app/data:ro  # Read-only access for monitoring
      - lex-logs:/app/logs
      - lex-backups:/app/backups:ro
    
    # Expose monitoring metrics (internal only)
    ports:
      - "127.0.0.1:9090:9090"  # Prometheus metrics
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
        labels: "service=lex-monitor"

  # ==================== NGINX REVERSE PROXY ====================
  lex-nginx:
    image: nginx:1.25-alpine
    container_name: lex-nginx
    restart: always
    
    networks:
      lex-network:
        ipv4_address: 172.20.0.5
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      # Nginx configuration
      - ./nginx_production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      
      # SSL certificates (mount from host)
      - /etc/letsencrypt:/etc/letsencrypt:ro
      
      # Static files
      - ./frontend:/usr/share/nginx/html/frontend:ro
      
      # Logs
      - lex-logs:/var/log/nginx/lex:rw
    
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 64M
    
    depends_on:
      - lex-api
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=lex-nginx"

  # ==================== OPTIONAL: REDIS CACHE ====================
  lex-redis:
    image: redis:7-alpine
    container_name: lex-redis
    restart: always
    
    networks:
      - lex-network
    
    command: >
      redis-server 
      --save 900 1 
      --save 300 10 
      --save 60 10000 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --appendonly yes
    
    volumes:
      - lex-data:/data
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Health check for Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
        labels: "service=lex-redis"

  # ==================== WATCHTOWER FOR AUTO-UPDATES ====================
  watchtower:
    image: containrrr/watchtower
    container_name: lex-watchtower
    restart: always
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600  # Check every hour
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=true
    
    command: lex-production lex-backup lex-monitor
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
        labels: "service=watchtower"