# LEX AI Production Docker Image
# üî± JAI MAHAKAAL! Multi-stage production build

# ==================== BUILD STAGE ====================
FROM python:3.11-slim as builder

# Set build arguments
ARG DEBIAN_FRONTEND=noninteractive

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create build user
RUN useradd --create-home --shell /bin/bash builder
USER builder
WORKDIR /home/builder

# Copy requirements first for better caching
COPY requirements.txt requirements_security.txt ./

# Install Python dependencies
RUN pip install --user --no-cache-dir --disable-pip-version-check \
    -r requirements.txt -r requirements_security.txt

# ==================== PRODUCTION STAGE ====================
FROM python:3.11-slim as production

# Metadata
LABEL maintainer="LEX AI Team"
LABEL version="1.0.0"
LABEL description="LEX AI Production Server - Security Hardened"

# Set production environment
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV ENV=production
ENV PATH="/home/lex/.local/bin:$PATH"

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash --uid 1001 lex && \
    mkdir -p /app/data /app/logs /app/backups /app/config && \
    chown -R lex:lex /app

# Switch to non-root user
USER lex
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /home/builder/.local /home/lex/.local

# Copy application code
COPY --chown=lex:lex *.py ./
COPY --chown=lex:lex .env.template ./
COPY --chown=lex:lex frontend/ ./frontend/

# Copy server orchestrator if exists
COPY --chown=lex:lex --from=. server/ ./server/ 2>/dev/null || true

# Create necessary directories with proper permissions
RUN mkdir -p data logs backups config temp && \
    chmod 755 data logs backups config temp

# Set up logging directory
RUN touch logs/lex.log logs/lex_production.log && \
    chmod 644 logs/*.log

# Create health check script
COPY --chown=lex:lex <<'EOF' /app/healthcheck.sh
#!/bin/bash
# Health check script for LEX container
set -e

# Check if the main process is running
if ! pgrep -f "lex_production_secure.py" > /dev/null; then
    echo "‚ùå LEX process not running"
    exit 1
fi

# Check HTTP endpoint
if ! curl -f -s http://localhost:8000/health > /dev/null; then
    echo "‚ùå HTTP health check failed"
    exit 1
fi

echo "‚úÖ LEX container healthy"
exit 0
EOF

RUN chmod +x /app/healthcheck.sh

# Create startup script
COPY --chown=lex:lex <<'EOF' /app/start_production.sh
#!/bin/bash
# Production startup script
set -e

echo "üî± JAI MAHAKAAL! Starting LEX Production Container üî±"

# Validate environment
if [ -z "$OPENROUTER_API_KEY" ]; then
    echo "‚ùå OPENROUTER_API_KEY not set"
    exit 1
fi

# Create .env file from template if it doesn't exist
if [ ! -f .env ] && [ -f .env.template ]; then
    echo "üìÑ Creating .env from template..."
    cp .env.template .env
fi

# Initialize/optimize database
echo "üóÉÔ∏è Optimizing database..."
python3 database_optimizer.py --optimize || echo "‚ö†Ô∏è Database optimization failed, continuing..."

# Start monitoring in background
echo "üìä Starting monitoring..."
nohup python3 production_monitor.py --daemon > logs/monitor.log 2>&1 &

# Start main application
echo "üöÄ Starting LEX Production Server..."
exec python3 lex_production_secure.py
EOF

RUN chmod +x /app/start_production.sh

# Expose port
EXPOSE 8000

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Production startup command
CMD ["/app/start_production.sh"]

# Add build info
RUN echo "LEX_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> /app/build_info.txt && \
    echo "LEX_BUILD_VERSION=1.0.0-production" >> /app/build_info.txt