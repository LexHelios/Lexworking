
# OpenTelemetry Collector Configuration for LexOS
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: lexos
  labels:
    app: otel-collector
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      prometheus:
        config:
          scrape_configs:
          - job_name: 'lexos-api'
            static_configs:
            - targets: ['lexos-api-service:8002']
            scrape_interval: 15s
            metrics_path: /metrics
          
          - job_name: 'redis-cluster'
            static_configs:
            - targets: ['redis-cluster:9121']
            scrape_interval: 30s
            metrics_path: /metrics
          
          - job_name: 'gpu-metrics'
            static_configs:
            - targets: ['lexos-api-service:9400']
            scrape_interval: 15s
            metrics_path: /metrics
      
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
          thrift_compact:
            endpoint: 0.0.0.0:6831
          thrift_binary:
            endpoint: 0.0.0.0:6832
      
      zipkin:
        endpoint: 0.0.0.0:9411
      
      # Kubernetes metrics
      k8s_cluster:
        auth_type: serviceAccount
        node: ${K8S_NODE_NAME}
        metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.pod.name
          - k8s.container.name
      
      # Host metrics
      hostmetrics:
        collection_interval: 30s
        scrapers:
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          disk:
            metrics:
              system.disk.io:
                enabled: true
              system.disk.operations:
                enabled: true
          network:
            metrics:
              system.network.io:
                enabled: true
          process:
            mute_process_name_error: true
            metrics:
              process.cpu.utilization:
                enabled: true
              process.memory.utilization:
                enabled: true

    processors:
      # Batch processor for performance
      batch:
        timeout: 1s
        send_batch_size: 1024
        send_batch_max_size: 2048
      
      # Memory limiter to prevent OOM
      memory_limiter:
        limit_mib: 512
        spike_limit_mib: 128
        check_interval: 5s
      
      # Resource processor to add metadata
      resource:
        attributes:
        - key: service.name
          value: lexos-api
          action: upsert
        - key: service.version
          value: "2.0.0"
          action: upsert
        - key: deployment.environment
          value: production
          action: upsert
        - key: k8s.cluster.name
          from_attribute: k8s.cluster.name
          action: upsert
        - key: k8s.namespace.name
          from_attribute: k8s.namespace.name
          action: upsert
        - key: k8s.pod.name
          from_attribute: k8s.pod.name
          action: upsert
      
      # Attributes processor for filtering
      attributes:
        actions:
        - key: http.user_agent
          action: delete
        - key: http.request.header.authorization
          action: delete
        - key: sensitive_data
          action: delete
      
      # Probabilistic sampler for traces
      probabilistic_sampler:
        sampling_percentage: 10.0
      
      # Span processor for trace enhancement
      span:
        name:
          to_attributes:
            rules:
            - ^\/api\/v1\/(?P<endpoint>.*)$
        include:
          match_type: regexp
          span_names:
          - ".*"
      
      # Metrics transform processor
      metricstransform:
        transforms:
        - include: http_requests_total
          match_type: strict
          action: update
          new_name: lexos_http_requests_total
        - include: http_request_duration_seconds
          match_type: strict
          action: update
          new_name: lexos_http_request_duration_seconds

    exporters:
      # Prometheus exporter
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: lexos
        const_labels:
          environment: production
          service: lexos-api
        send_timestamps: true
        metric_expiration: 180m
        enable_open_metrics: true
      
      # Jaeger exporter for traces
      jaeger:
        endpoint: jaeger-collector:14250
        tls:
          insecure: true
      
      # OTLP exporter for traces and metrics
      otlp:
        endpoint: http://jaeger-collector:4317
        tls:
          insecure: true
        headers:
          api-key: ${JAEGER_API_KEY}
      
      # Logging exporter for debugging
      logging:
        loglevel: info
        sampling_initial: 5
        sampling_thereafter: 200
      
      # File exporter for backup
      file:
        path: /tmp/otel-logs.json
        rotation:
          max_megabytes: 100
          max_days: 7
          max_backups: 3

    extensions:
      # Health check extension
      health_check:
        endpoint: 0.0.0.0:13133
        path: /health
      
      # pprof extension for profiling
      pprof:
        endpoint: 0.0.0.0:1777
      
      # zpages extension for debugging
      zpages:
        endpoint: 0.0.0.0:55679

    service:
      extensions: [health_check, pprof, zpages]
      
      pipelines:
        # Traces pipeline
        traces:
          receivers: [otlp, jaeger, zipkin]
          processors: [memory_limiter, batch, resource, attributes, probabilistic_sampler, span]
          exporters: [jaeger, otlp, logging]
        
        # Metrics pipeline
        metrics:
          receivers: [otlp, prometheus, hostmetrics, k8s_cluster]
          processors: [memory_limiter, batch, resource, metricstransform]
          exporters: [prometheus, otlp, logging]
        
        # Logs pipeline
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch, resource, attributes]
          exporters: [logging, file]
      
      # Telemetry configuration
      telemetry:
        logs:
          level: info
          development: false
          sampling:
            initial: 5
            thereafter: 200
        metrics:
          level: detailed
          address: 0.0.0.0:8888
        traces:
          processors: [batch]

---
# OpenTelemetry Collector Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: lexos
  labels:
    app: otel-collector
spec:
  replicas: 2
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      serviceAccountName: otel-collector
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
      
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.89.0
        command: ["/otelcol-contrib"]
        args: ["--config=/etc/otel-collector-config.yaml"]
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: JAEGER_API_KEY
          valueFrom:
            secretKeyRef:
              name: lexos-secrets
              key: JAEGER_API_KEY
              optional: true
        
        ports:
        - name: otlp-grpc
          containerPort: 4317
          protocol: TCP
        - name: otlp-http
          containerPort: 4318
          protocol: TCP
        - name: jaeger-grpc
          containerPort: 14250
          protocol: TCP
        - name: jaeger-thrift
          containerPort: 14268
          protocol: TCP
        - name: zipkin
          containerPort: 9411
          protocol: TCP
        - name: prometheus
          containerPort: 8889
          protocol: TCP
        - name: health
          containerPort: 13133
          protocol: TCP
        - name: pprof
          containerPort: 1777
          protocol: TCP
        - name: zpages
          containerPort: 55679
          protocol: TCP
        - name: metrics
          containerPort: 8888
          protocol: TCP
        
        livenessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        volumeMounts:
        - name: config
          mountPath: /etc/otel-collector-config.yaml
          subPath: otel-collector-config.yaml
          readOnly: true
        - name: tmp
          mountPath: /tmp
      
      volumes:
      - name: config
        configMap:
          name: otel-collector-config
      - name: tmp
        emptyDir: {}
      
      terminationGracePeriodSeconds: 30

---
# Service Account for OpenTelemetry Collector
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: lexos

---
# ClusterRole for OpenTelemetry Collector
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "services", "endpoints", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding for OpenTelemetry Collector
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
- kind: ServiceAccount
  name: otel-collector
  namespace: lexos

---
# Service for OpenTelemetry Collector
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: lexos
  labels:
    app: otel-collector
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8889"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: otlp-grpc
    port: 4317
    targetPort: otlp-grpc
    protocol: TCP
  - name: otlp-http
    port: 4318
    targetPort: otlp-http
    protocol: TCP
  - name: jaeger-grpc
    port: 14250
    targetPort: jaeger-grpc
    protocol: TCP
  - name: jaeger-thrift
    port: 14268
    targetPort: jaeger-thrift
    protocol: TCP
  - name: zipkin
    port: 9411
    targetPort: zipkin
    protocol: TCP
  - name: prometheus
    port: 8889
    targetPort: prometheus
    protocol: TCP
  - name: health
    port: 13133
    targetPort: health
    protocol: TCP
  - name: metrics
    port: 8888
    targetPort: metrics
    protocol: TCP
  selector:
    app: otel-collector
