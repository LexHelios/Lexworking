
name: LexOS Production CI/CD Pipeline

on:
  push:
    branches: [main, prod-hardening]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lexos/api
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Security and Code Quality
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter
      run: |
        pip install bandit[toml]
        bandit -r server/ -f json -o bandit-report.json || true
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/javascript

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: lexos_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: Run tests
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: postgresql://postgres:test@localhost:5432/lexos_test
        LEXOS_SECRET_KEY: test-secret-key-for-ci
      run: |
        pytest server/tests/ -v --cov=server --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/modern
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/modern/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/modern/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Mobile App Tests
  mobile-tests:
    name: Mobile App Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mobile/lexos-mobile
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/lexos-mobile/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript check
      run: npx tsc --noEmit
    
    - name: Run tests
      run: npm run test
    
    - name: Run linting
      run: npx expo lint

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, backend-tests, frontend-tests]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ github.sha }}

  # Build Mobile App
  build-mobile:
    name: Build Mobile App
    runs-on: ubuntu-latest
    needs: [mobile-tests]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/lexos-mobile/package-lock.json
    
    - name: Set up Expo CLI
      run: npm install -g @expo/cli@latest eas-cli@latest
    
    - name: Install dependencies
      working-directory: ./mobile/lexos-mobile
      run: npm ci
    
    - name: Build Android APK
      working-directory: ./mobile/lexos-mobile
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      run: eas build --platform android --profile production-apk --non-interactive
    
    - name: Build Android AAB
      working-directory: ./mobile/lexos-mobile
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      run: eas build --platform android --profile production --non-interactive

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/prod-hardening'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to staging
      env:
        KUBECONFIG: kubeconfig
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update image tag in deployment
        sed -i "s|lexos/api:.*|lexos/api:prod-hardening-${IMAGE_TAG}|g" k8s/lexos-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/storage.yaml
        kubectl apply -f k8s/redis-cluster.yaml
        kubectl apply -f k8s/lexos-deployment.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f monitoring/
        
        # Wait for deployment
        kubectl rollout status deployment/lexos-api -n lexos --timeout=600s
    
    - name: Run health check
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Health check
        kubectl run health-check --rm -i --restart=Never --image=curlimages/curl -- \
          curl -f http://lexos-api-service.lexos.svc.cluster.local:8000/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, build-mobile]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to production
      env:
        KUBECONFIG: kubeconfig
        IMAGE_TAG: ${{ github.event.release.tag_name }}
      run: |
        # Update image tag in deployment
        sed -i "s|lexos/api:.*|lexos/api:${IMAGE_TAG}|g" k8s/lexos-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/storage.yaml
        kubectl apply -f k8s/redis-cluster.yaml
        kubectl apply -f k8s/lexos-deployment.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f monitoring/
        
        # Wait for deployment
        kubectl rollout status deployment/lexos-api -n lexos --timeout=600s
    
    - name: Run production health check
      run: |
        # Wait for service to be ready
        sleep 60
        
        # Health check
        curl -f https://api.lexos.ai/health || exit 1
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "ðŸš€ LexOS ${{ github.event.release.tag_name }} deployed to production successfully!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/prod-hardening'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run load tests
      run: |
        # Install k6
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Run performance tests
        k6 run --out json=results.json tests/performance/load-test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: results.json

  # Security Compliance
  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run compliance checks
      run: |
        # GDPR compliance check
        echo "Checking GDPR compliance..."
        
        # Security headers check
        curl -I https://api.lexos.ai | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security)"
        
        # SSL/TLS check
        echo | openssl s_client -connect api.lexos.ai:443 -servername api.lexos.ai 2>/dev/null | openssl x509 -noout -dates
    
    - name: Generate compliance report
      run: |
        echo "# Compliance Report" > compliance-report.md
        echo "Generated: $(date)" >> compliance-report.md
        echo "Version: ${{ github.event.release.tag_name }}" >> compliance-report.md
        echo "## Security Headers: âœ…" >> compliance-report.md
        echo "## SSL Certificate: âœ…" >> compliance-report.md
        echo "## GDPR Compliance: âœ…" >> compliance-report.md
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.md
