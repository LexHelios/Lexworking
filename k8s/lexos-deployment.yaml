
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lexos-api
  namespace: lexos
  labels:
    app: lexos-api
    version: "2.0.0"
    component: api-server
spec:
  replicas: 1  # Single replica for H100 GPU allocation
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app: lexos-api
  template:
    metadata:
      labels:
        app: lexos-api
        version: "2.0.0"
        component: api-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8002"
        prometheus.io/path: "/metrics"
        # Force pod restart on config changes
        configmap.reloader.stakater.com/reload: "lexos-config"
        secret.reloader.stakater.com/reload: "lexos-secrets"
    spec:
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Node Selection for H100 GPUs
      nodeSelector:
        accelerator: nvidia-h100
        node-type: gpu-compute
      
      # Tolerations for GPU nodes
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      - key: gpu-compute
        operator: Equal
        value: "true"
        effect: NoSchedule
      
      # Affinity rules
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: accelerator
                operator: In
                values: ["nvidia-h100"]
              - key: node-type
                operator: In
                values: ["gpu-compute"]
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["lexos-api"]
              topologyKey: kubernetes.io/hostname
      
      # Service Account
      serviceAccountName: lexos-api
      
      # Init Containers
      initContainers:
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z redis-cluster 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
      
      - name: wait-for-postgres
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z postgres-cluster 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
      
      - name: gpu-device-plugin-init
        image: nvidia/k8s-device-plugin:v0.14.1
        command: ['sh', '-c']
        args:
        - |
          echo "Initializing GPU device plugin..."
          nvidia-smi -L
          echo "GPU initialization complete"
        securityContext:
          privileged: true
        volumeMounts:
        - name: device-plugin
          mountPath: /var/lib/kubelet/device-plugins
        - name: dev
          mountPath: /dev
      
      containers:
      # Main API Container
      - name: lexos-api
        image: lexos/api:2.0.0-production
        imagePullPolicy: Always
        
        # Security Context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Needed for model loading
          capabilities:
            drop: ["ALL"]
            add: ["NET_BIND_SERVICE"]
        
        # Resource Requirements - H100 Optimized
        resources:
          requests:
            memory: "32Gi"
            cpu: "8"
            nvidia.com/gpu: "8"  # Request all 8 H100 GPUs
            ephemeral-storage: "50Gi"
          limits:
            memory: "64Gi"
            cpu: "16"
            nvidia.com/gpu: "8"  # Limit to 8 H100 GPUs
            ephemeral-storage: "100Gi"
        
        # Environment Variables
        envFrom:
        - configMapRef:
            name: lexos-config
        - secretRef:
            name: lexos-secrets
        
        env:
        # GPU-specific environment variables
        - name: NVIDIA_VISIBLE_DEVICES
          value: "all"
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "compute,utility"
        - name: NVIDIA_REQUIRE_CUDA
          value: "cuda>=12.0"
        
        # NCCL Configuration for multi-GPU
        - name: NCCL_DEBUG
          value: "INFO"
        - name: NCCL_IB_DISABLE
          value: "0"
        - name: NCCL_NET_GDR_LEVEL
          value: "2"
        - name: NCCL_SOCKET_IFNAME
          value: "eth0"
        
        # PyTorch optimizations
        - name: OMP_NUM_THREADS
          value: "8"
        - name: TORCH_CUDA_ARCH_LIST
          value: "9.0"  # H100 architecture
        - name: CUDA_LAUNCH_BLOCKING
          value: "0"
        
        # Pod information
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Ports
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8002
          protocol: TCP
        - name: vllm
          containerPort: 8001
          protocol: TCP
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Volume Mounts
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: models-storage
          mountPath: /app/models
        - name: logs-storage
          mountPath: /app/logs
        - name: tmp-storage
          mountPath: /tmp
        - name: cache-storage
          mountPath: /app/cache
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: tls-private
          mountPath: /etc/ssl/private
          readOnly: true
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      
      # Sidecar: GPU Monitoring
      - name: gpu-monitor
        image: nvidia/dcgm-exporter:3.1.8-3.1.5-ubuntu20.04
        imagePullPolicy: IfNotPresent
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        ports:
        - name: gpu-metrics
          containerPort: 9400
          protocol: TCP
        
        env:
        - name: DCGM_EXPORTER_LISTEN
          value: ":9400"
        - name: DCGM_EXPORTER_KUBERNETES
          value: "true"
        
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
      
      # Sidecar: Log Shipper
      - name: log-shipper
        image: fluent/fluent-bit:2.1.10
        imagePullPolicy: IfNotPresent
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        volumeMounts:
        - name: logs-storage
          mountPath: /app/logs
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
        
      # Volumes
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: lexos-data-pvc
      - name: models-storage
        persistentVolumeClaim:
          claimName: lexos-models-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: lexos-logs-pvc
      - name: tmp-storage
        emptyDir:
          sizeLimit: "10Gi"
      - name: cache-storage
        emptyDir:
          sizeLimit: "5Gi"
      - name: tls-certs
        secret:
          secretName: lexos-tls
          items:
          - key: tls.crt
            path: lexos.crt
      - name: tls-private
        secret:
          secretName: lexos-tls
          items:
          - key: tls.key
            path: lexos.key
      - name: device-plugin
        hostPath:
          path: /var/lib/kubelet/device-plugins
      - name: dev
        hostPath:
          path: /dev
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Termination Grace Period
      terminationGracePeriodSeconds: 60
      
      # Restart Policy
      restartPolicy: Always

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: lexos-api
  namespace: lexos
  labels:
    app: lexos-api
    version: "2.0.0"
automountServiceAccountToken: true

---
# Role for API access
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: lexos-api-role
  namespace: lexos
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: lexos-api-rolebinding
  namespace: lexos
subjects:
- kind: ServiceAccount
  name: lexos-api
  namespace: lexos
roleRef:
  kind: Role
  name: lexos-api-role
  apiGroup: rbac.authorization.k8s.io

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: lexos-api-service
  namespace: lexos
  labels:
    app: lexos-api
    version: "2.0.0"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8002"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 8002
    targetPort: metrics
    protocol: TCP
  - name: vllm
    port: 8001
    targetPort: vllm
    protocol: TCP
  selector:
    app: lexos-api
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
# Headless Service for StatefulSet-like behavior
apiVersion: v1
kind: Service
metadata:
  name: lexos-api-headless
  namespace: lexos
  labels:
    app: lexos-api
    version: "2.0.0"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  selector:
    app: lexos-api
